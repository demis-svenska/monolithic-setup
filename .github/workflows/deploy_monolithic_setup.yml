name: Deploy monolithic setup using terraform

# trigger on all push events to main branch
on: 
  workflow_dispatch:
    inputs:
      label:
        description: 'The label to specify which job to run'
        required: true

jobs:
  Deploy: 
    if: contains(github.event.inputs.label,'Deploy')
    #needs: terraform-destroy
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      PRIVATE_IP: ''
      PORT: 22
    steps:
      - uses: actions/checkout@v2
      - name: generate ssh-key
        run: ssh-keygen -q -t rsa -N "" -f ~/.ssh/id_rsa
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7
      - name: check working directory
        run: pwd
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve   
      - name: Generate Terraform output
        run:  terraform output -raw public_ip | sed 's/::debug::Terraform exited with code 0.//g' > /opt/publicip_output
      - name: display public Ip address
        run: cat /opt/publicip_output
      - name: Set output variable
        id: set_output
        run: echo "::set-output name=terraform_output::$(cat /opt/publicip_output)"
      - name: Use output variable
        run: echo ${{ steps.set_output.outputs.terraform_output }}  
      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client
      - name: Set up SSH key
        if: false
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ~/.ssh/id_rsa
      - name: display output value
        run: echo ${{ steps.set_output.outputs.terraform_output }} 
      - name: sleep for 10 second
        run: sleep 10 
      - name: display content of file
        run: cat /opt/publicip_output
  terraform-destroy:
    if: contains(github.event.inputs.label, 'Destroy')
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
    steps:
      - uses: actions/checkout@v2
      - name: generate ssh-key
        run: ssh-keygen -q -t rsa -N "" -f ~/.ssh/id_rsa
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: check aws credentials 
        run: aws s3 ls 
      - name: Terraform Destroy
        run: |
          terraform init
          terraform destroy -auto-approve 
          
      

    

